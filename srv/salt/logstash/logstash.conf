input {
  syslog {
    port => {{ pillar['logstash']['port'] }} 
  }
}

filter {
  mutate {
    replace => [ "host", "{{ grains['id'] }}" ]
  }

{% raw %}

  multiline {
    pattern => "(^#011.+)"
    what => "previous"
    add_tag => [ "multi_line" ]
  }
  
  if "multi_line" in [tags] {
    mutate {
      remove_tag => [ "multi_line" ]
      gsub => [ 
        "message", "#011", "  ",
        "message", "\n\n", "
"
      ]
    }
  }
  if [program] =~ "nginx" {
    grok { 
      match => [ "message", '%{IPORHOST:clientip} -%{DATA}- \[%{HTTPDATE:timestamp}\] "%{WORD:verb} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}" %{NUMBER:response} (?:%{NUMBER:bytes}|-) (?:"(?:%{URI:referrer}|-)"|%{QS:referrer}) %{QS:agent}'] 
    }
  }
  if [program] =~ "mongod.*" {
    grok { 
      match => [ "message", "\[conn%{NUMBER:mongo_connection}\] %{WORD:mongo_command} %{NOTSPACE:mongo_database} %{WORD}: \{%{GREEDYDATA:mongo_statement}\} %{GREEDYDATA} %{NUMBER:mongo_elapsed_time:int}ms"] 
      add_tag => [ "metric" ]
      add_field => ["metric", "%{mongo_elapsed_time}" ]
    }
    grok { match => [ "message", " planSummary: %{WORD:mongo_plan_summary}"] }
    grok { match => [ "message", " cursorid:%{NUMBER:mongo_cursor_id}"] }
    grok { match => [ "message", " ntoreturn:%{NUMBER:mongo_number_to_return:int}"] }
    grok { match => [ "message", " ntoskip:%{NUMBER:mongo_number_to_skip:int}"] }
    grok { match => [ "message", " nscanned:%{NUMBER:mongo_number_scanned:int}"] }
    grok { match => [ "message", " scanAndOrder:%{NUMBER:mongo_scan_and_order:int}"] }
    grok { match => [ "message", " idhack:%{NUMBER:mongo_id_hack:int}"] }
    grok { match => [ "message", " nmoved:%{NUMBER:mongo_number_moved:int}"] }
    grok { match => [ "message", " nupdated:%{NUMBER:mongo_number_updated:int}"] }
    grok { match => [ "message", " keyUpdates:%{NUMBER:mongo_key_updates:int}"] }
    grok { match => [ "message", " numYields: %{NUMBER:mongo_num_yields:int}"] }
    grok { match => [ "message", " locks\(micros\) r:%{NUMBER:mongo_read_locks:int}"] }
    grok { match => [ "message", " locks\(micros\) w:%{NUMBER:mongo_write_locks:int}"] }
    grok { match => [ "message", " nreturned:%{NUMBER:mongo_number_returned:int}"] }
    grok { match => [ "message", " reslen:%{NUMBER:mongo_result_length:int}"] }
    #[conn1367] end connection 10.0.1.69:56156 (19 connections now open)
    #[initandlisten] connection accepted from 10.0.1.211:40295 #1338 (2 connections now open)
    grok {
      match => [ "message", "\(%{NUMBER:mongo_connections:int} %{DATA} now open\)"]
    }
    grok { 
      match => [ "message", " end connection %{IP:mongo_ip}:%{NUMBER}" ] 
      add_tag => ["mongo_connection_ended"]
    }
    grok { 
      match => [ "message", " connection accepted from %{IP:mongo_ip}:%{NUMBER}" ] 
      add_tag => ["mongo_connection_added"]
    }

    mutate { replace => [ "program", "mongod" ] }
  } 
  if [program] =~ "wheat*" {
    grok {
      match => [ "message", "(?<java_class>[^\s]+) (?<message>.+)" ]
      overwrite => [ "message" ]
    }
    if [program] == "myapp-wheat" { 
      grok { 
        match => [ "message", "It took %{NUMBER:response_time:int} ms to render %{NUMBER:datapoints:int} datapoints" ] 
        add_tag => ["metric"]
        add_field => ["metric", "%{response_time}"]
      }
    }   
    if [program] == "myapp-wheat-worker" { 
      grok { 
        match => [ "message", "Fetched %{NUMBER:alerts_count:int} %{DATA:alerts_type} from %{DATA:alert_provider} in %{NUMBER:response_time:int} ms" ] 
        add_tag => ["metric"]
        add_field => ["metric", "%{response_time}"]
      }

      grok { 
        match => [ "message", "Generated %{NUMBER:notifications_count:int} notifications from %{NUMBER:notifications_alert_count:int} alerts in %{NUMBER:response_time:int} ms" ] 
        add_tag => ["metric"]
        add_field => ["metric", "%{response_time}"]
      }

      grok { 
        match => [ "message", "Generated tile for geometry %{NUMBER:tiler_geometry:int}/%{NUMBER:tiler_geometry_total:int} in geometry group %{DATA:tiler_group_id} in %{NUMBER:response_time:int} ms \(%{DATA:tiler_id}\)" ] 
        add_tag => ["metric"]
        add_field => ["metric", "%{response_time}"]
      }

      grok { 
        match => [ "message", "Generated combined tile for tile %{NUMBER:tiler_tile:int}/%{NUMBER:tiler_tile_total:int} in geometry group %{DATA:tiler_group_id} in %{NUMBER:response_time:int} ms \(%{DATA:tiler_id}\)" ] 
        add_tag => ["metric"]
        add_field => ["metric", "%{response_time}"]
      }
      if [tiler_id] and [tiler_group_id] {
        mutate { 
          replace => ["tiler_id" , "%{logsource}-%{tiler_group_id}-%{tiler_id}"]
        }
      }
    }
  }
  else if [program] =~ "myapp*" { 
    grok { 
      match => [ "message", "path=%{PATH:node_path}" ] 
      add_field => ["path", "%{node_path}"]
    }
    if [program] == "myapp" { 
      grok { 
        match => [ "message", "Completed %{WORD:request_transport} request %{WORD:request_method} %{WORD:request_entity} in %{NUMBER:response_time:int}ms \(%{NUMBER:request_status:int}\)" ] 
        add_tag => ["metric"]
        add_field => ["metric", "%{response_time}"]
      }
      grok { 
        match => [ "message", "Failed %{WORD:request_transport} request %{WORD:request_method} %{WORD:request_entity} in %{NUMBER:response_time:int}ms \(%{NUMBER:request_status:int}\)" ] 
        add_tag => ["metric", "error"]
        add_field => ["metric", "%{response_time}"]
      }
    }
  }
  if [program] == "cpu-metrics" {  
    grok { match => [ "message", "%{NUMBER:cpu_load:float} %{NUMBER:cpu_load_5_minutes:float} %{NUMBER:cpu_load_15_minutes:float}" ] }
    mutate { 
      add_tag => ["metric"] 
      add_field => {
        "metric" => "%{cpu_load}"
      }
    }
  }
  if [program] == "disk-metrics" {  
    grok { match => [ "message", "%{DATA:filesystem}%{SPACE}%{NUMBER:disk_blocks:int}%{SPACE}%{NUMBER:disk_used:int}%{SPACE}%{NUMBER:disk_available:int} %{SPACE}%{NUMBER:disk_ratio:int}%%{SPACE}%{PATH:path}" ] }
    mutate { 
      add_tag => ["metric"] 
      add_field => {
        "metric" => "%{disk_ratio}"
      }
      replace => ["filesystem", "%{logsource} - %{filesystem}"]
    }
  }
  if [program] == "memory-metrics" { 
    grok { match => [ "message", "MemTotal:%{SPACE}%{NUMBER:memory_total:int} kB" ] }
    grok { match => [ "message", "MemFree:%{SPACE}%{NUMBER:memory_free:int} kB" ] }
    grok { match => [ "message", "MemAvailable:%{SPACE}%{NUMBER:memory_available:int} kB" ] }
    mutate { 
      add_tag => ["metric"]
      add_field => {
        "metric" => "%{memory_free}"
      }
    }
  }
  if("metric" in [tags]){
    mutate { convert => { "metric" => "float" } }
  }
}

{% endraw %}

output {
  elasticsearch { 
    protocol => transport 
    port => {{ pillar['elasticsearch']['port']['internal'] }} 
    host => localhost
    cluster => {{ pillar['elasticsearch']['cluster'] }} 
  }

  s3{
     access_key_id => "{{ pillar['logserver']['s3']['key'] }}"             
     secret_access_key => "{{ pillar['logserver']['s3']['secretKey'] }}" 
     endpoint_region => "{{ pillar['logserver']['s3']['region'] }}"           
     bucket => "{{ pillar['logserver']['s3']['bucket'] }}" 
     size_file => {{ pillar['logserver']['s3']['filesize'] }}                                                                  
  }

  {# Do not forward to the riemann server if it doesn't exist #}
  {% if salt.mine.get('roles:riemann', 'private_ip', expr_form='grain').items() | length > 0 %}

  if("metric" in [tags] ){
    riemann {
      port => {{ pillar['riemann']['port'] }}
      host => "{{ pillar['riemann']['hostname'] }}"
      sender => "%{host}"
      riemann_event =>  [
        "service", "%{program}",
        "tags", "%{tags}",
        "severity", "%{severity_label}",
        "metric", "%{metric}"
      ]
    }
  }

  {% endif %}
}